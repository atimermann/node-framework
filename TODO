- Migrar todos os arquivos para ESM
- Criar teste unitário
- configuração CORS
- Suporte CDN https://github.com/niftylettuce/express-cdn
- JS-2-DOC MARDKDOWN
- Revisar cabeçalho de documentação dos arquivos (caminho mudou)
- Migrar para Typescript (pelo menos documentação)
- Estruturar e definir melhor config com DOT ENV (foi atualizado muitas versões)
- CONVERTER TODA CONFIGURAÇÃO PARA ENV, deixar um padrão e converter para ENV verificar se dá pra chamar this.config('server.timezone') e em .env ser SERVER_TIMEZONE
- Dupliquei sleep em varios lugares, centralizar no agt/util e puxar de lá ou pensar numa forma melhor

**** JOBS ****
- Documentar uso da nova funcionalidade jobs
    - Dizer q implementa jobs simples, sem fila, algo parecido com cron com fork
    - Dizer q precisar ser definido dentro do método jobs
    - schedule null executa imediatamente
    - documentar cron com suporte segundo
    - documentar onde colocar o código de inicialização dos jobs (em jobs)
    - Documentar como funciona jobSetup e jobTeardown
    - Documentar que sigint executa teardown
- Criar 4 funções para serem executadas e documentar:
    - NO MASTER:
        - [OK] createJob -> Renomar job para createJob()
          [OK] Implementar: ao definir schedule para null ou undefined para executar o job imediatamente sem agendamento
        - onJobCreated   -> Executa toda vez antes de criar um novo job, ou novo fork (Executa no processo Master)
        - onJobCompleted   -> Executa dota vez depois de executar o job finalizar (Executa no processo Master)
    - NO WORkER:
        - [OK] JobSetup      ->  Executa no worker antes de iniciar o job (Executa no worker)
        - [OK] JobTeardown   ->  Executa no workar antes de finalizar o processo (Executa no worker)
- implementar comunicação com worker de qualquer lugar, ex: em uma API REST -> onMessaFromJOB X
- simplificar kill job, quebrar mais métodos, pois só muda o SEGINT, tá com código repetido
