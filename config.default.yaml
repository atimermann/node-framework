---
# Configuração do Servidor HTTP Express
# body-parser: https://github.com/expressjs/body-parser
httpServer:
  enabled: true
  port: 3001
  urlenconded:
    limit: '10mb'
  json:
    limit: '10mb'
  log:
    # Ref: https://github.com/expressjs/morgan
    format: ':remote-addr - :remote-user ":method :url HTTP/:http-version" :status :res[content-length] ":referrer" ":user-agent"'

  # Rota para acesso a recursos estáticos
  staticRoute: '/static'

  # Caso utilize um CDN em vez do diretório local estatico, habilitar aqui e definir cdnUrl para url base do CDN
  cdn: false

  # Url do CDN
  cdnUrl: ''

  # Acessa arquivos estático do pacote (node-pkg): Necessário adicionar no package: "assets":  ["apps/**/views/*", "public"]
  # Deve ser desativado para acesso via CDN, ou se for utilizar o diretório public para arquivos enviados pelo usuário (upload)
  # Em caso de true deve ser empacotado novamente sempre que houver alteração dos arquivos estáticos
  # Ao desativar não esqueça remover no package.json a entrada "public" em pkg.assets
  loadStaticFromPackage: true

  timezone: "America/Sao_Paulo"

# Ativa modo ncurses (Carrega interface ncurse para monitorar aplicação visualmente)
blessed:
  enabled: true

# Habilita Sistema Gerenciador de Jobs e Worker
jobManager:
  enabled: true
  logger:
    json:
      enabled: true # Obrigratório para log ser carregado pelo processo pai

logger:
  # Habilita log na interface blesse (necessário ter o blessed ativo)
  blessed:
    enabled: true

  # Habilita Log em console
  console:
    enabled: false
    handleExceptions: false

  # Menor prioridade de log que será processado (emerg, alert, crit, error, warnin, notice, info, debug)
  level: debug

  # Silencia log
  silent: false

################################################
# Configuração do servidor socket.io
################################################
socket:
  enabled: true
  port: 4001
  # Modo de execução, podendo ser: (REF: https://socket.io/docs/v4/server-initialization/)
  #  - standalone (Servidor simples independente do servidor http)
  #  - http-server (integrado com servidor http-server do framework)
  #  - standalone-http (Integrado a um servidor http
  #  - standalone-https (integrado a um servidor https com certificado)
  #     - https://socket.io/docs/v4/server-initialization/#with-an-https-server TODO: complementar configuração client authentication
  #  - standalone-http2 (Melhor desempenho e eficiência com multiplexação, compactação de cabeçalho e push de servidor.)
  mode: standalone
  # Chaves usado no modo https e http2
  keys:
    cert: '/path/to/my/cert.pem'
    key: '/path/to/my/key.pem'
  # https://socket.io/docs/v4/handling-cors/
  cors:
    origin: '*'
  # https://socket.io/docs/v4/how-it-works/#upgrade-mechanism
  transports: ["polling", "websocket"]
  # Demais opções https://socket.io/docs/v4/server-options
  options: {}



